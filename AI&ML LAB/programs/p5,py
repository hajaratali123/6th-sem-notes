import numpy as np
import matplotlib.pyplot as plt

def local_regression(x0, X, Y, tau):
    # Convert x0, X to 2D arrays
    x0 = np.array([1, x0])
    X = np.array([[1, i] for i in X])
    
    # Calculate weights
    xw = np.exp(np.sum((X - x0)**2, axis=1) / (-2 * tau**2))
    
    # Compute beta using weighted least squares
    W = np.diag(xw)  # Weight matrix
    beta = np.linalg.inv(X.T @ W @ X) @ X.T @ W @ Y
    
    # Predict for x0
    prediction = np.dot(beta, x0)
    
    return prediction

def draw(tau):
    prediction = [local_regression(x0, X, Y, tau) for x0 in domain]
    
    plt.plot(X, Y, 'o', color='black')
    plt.plot(domain, prediction, color='red')
    plt.title(f'Local Regression (tau={tau})')
    plt.show()

# Generate data
X = np.linspace(-3, 3, num=100)
Y = np.log(np.abs(X**2 - 1) + 0.5)
domain = X

# Draw plots for different tau values
draw(10)
draw(1)
draw(0.1)
draw(0.01)
