3D Gasket -

#include <stdio.h>
#include <glut.h>
float v[4][3] = { {0, 0, 1}, {0, 1, 0}, {-1, -0.5, 0}, {1, -0.5, 0} };
float colors[4][3] = { {1, 0, 0}, {0, 1, 0}, {0, 0, 1}, {0, 0, 0} };
int n;
void triangle(float* va, float* vb, float* vc) {
	glBegin(GL_TRIANGLES);
	glVertex3fv(va);
	glVertex3fv(vb);
	glVertex3fv(vc);
	glEnd();
}
void tetra(float* a, float* b, float* c, float* d) {
	glColor3fv(colors[0]);
	triangle(a, b, c);
	glColor3fv(colors[1]);
	triangle(a, c, d);
	glColor3fv(colors[2]);
	triangle(a, d, b);
	glColor3fv(colors[3]);
	triangle(b, d, c);
}
void divide_tetra(float* a, float* b, float* c, float* d, int m) {
	float mid[6][3];
	int j;
	if (m > 0) {
		for (j = 0; j < 3; j++) mid[0][j] = (a[j] + b[j]) / 2;
		for (j = 0; j < 3; j++) mid[1][j] = (a[j] + c[j]) / 2;
		for (j = 0; j < 3; j++) mid[2][j] = (a[j] + d[j]) / 2;
		for (j = 0; j < 3; j++) mid[3][j] = (b[j] + c[j]) / 2;
		for (j = 0; j < 3; j++) mid[4][j] = (c[j] + d[j]) / 2;
		for (j = 0; j < 3; j++) mid[5][j] = (b[j] + d[j]) / 2;
		divide_tetra(a, mid[0], mid[1], mid[2], m - 1);
		divide_tetra(mid[0], b, mid[3], mid[5], m - 1);
		divide_tetra(mid[1], mid[3], c, mid[4], m - 1);
		divide_tetra(mid[2], mid[5], mid[4], d, m - 1);
	}
	else {
		tetra(a, b, c, d);
	}
}
void display() {
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	divide_tetra(v[0], v[1], v[2], v[3], n);
	glFlush();
}
void reshape(int w, int h) {
	glViewport(0, 0, w, h);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	if (w <= h) {
		glOrtho(-2, 2, -2 * (float)h / (float)w, 2 * (float)h / (float)w, -10, 10);
	}
	else {
		glOrtho(-2 * (float)w / (float)h, 2 * (float)w / (float)h, -2, 2, -10, 10);
	}
	glMatrixMode(GL_MODELVIEW);
}
void main() {
	printf("Enter the number of subdivisions?: ");
	scanf_s("%d", &n);
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB | GLUT_DEPTH);
	glutInitWindowSize(500, 500);	
	glutCreateWindow("3D Gasket");
	glutReshapeFunc(reshape);
	glutDisplayFunc(display);
	glEnable(GL_DEPTH_TEST);
	glClearColor(1, 1, 1, 1);
	glutMainLoop();
}

-----------------------------------------------------------------------------

Bresenham's Line Drawing Algorithm

#include<stdio.h>
#include<math.h>
#include<glut.h>
int X1, Y1, X2, Y2;

void draw_pixel(int x, int y)
{
	glBegin(GL_POINTS);
	glVertex2i(x, y);
	glEnd();
}
void LineBres()
{

	glClear(GL_COLOR_BUFFER_BIT);
	int dx = abs(X2 - X1), dy = abs(Y2 - Y1);
	int p = 2 * dy - dx;
	int twoDy = 2 * dy, twoDyDx = 2 * (dy - dx);
	int x, y;
	if (X1 > X2)
	{
		x = X2;
		y = Y2;
		X2 = X1;
	}
	else
	{
		x = X1;
		y = Y1;
		X2 = X2;

	}


	draw_pixel(x, y);
	while (x < X2)
	{
		x++;
		if (p < 0)
			p += twoDy;
		else
		{
			y++;
			p += twoDy;


		}
		draw_pixel(x, y);
	}
	glFlush();
}
void Init()
{
	glClearColor(1, 1, 1, 1);
	glColor3f(0, 1, 0);
	glPointSize(2.0);
	glViewport(0, 0, 500, 500);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluOrtho2D(0, 500, 0, 500);
	glMatrixMode(GL_MODELVIEW);

}
void main()
{
	printf("Enter the two points for drawing a line using Breenham's\n");
	printf("\nEnter point1 (x1 y1): ");
	scanf_s("%d %d", &X1, &Y1);
	printf("\nEnter point2 (x2 y2): ");
	scanf_s("%d %d", &X2, &Y2);
	glutInitWindowSize(300, 400);
	glutInitWindowPosition(0, 0);
	glutCreateWindow("Line Brenseham");
	Init();
	glutDisplayFunc(LineBres);
	glutMainLoop();
}

---------------------------------------------------------------------------

2D Gasket -

#include <glut.h>
#include <stdio.h>

float v[3][2] = { {0, 1}, {-1, -1}, {1, -1} };
int n;

void triangle(float* a, float* b, float* c)
{
	glBegin(GL_TRIANGLES);
	glVertex2fv(a);
	glVertex2fv(b);
	glVertex2fv(c);
	glEnd();
}

void divide_triangle(float* a, float* b, float* c, int m)
{
	float v1[2], v2[2], v3[2];
	int j;
	if (m > 0) {
		for (j = 0; j < 2; ++j) v1[j] = (a[j] + b[j]) / 2;
		for (j = 0; j < 2; ++j) v2[j] = (a[j] + c[j]) / 2;
		for (j = 0; j < 2; ++j) v3[j] = (b[j] + c[j]) / 2;
		divide_triangle(a, v1, v2, m - 1);
		divide_triangle(v1, b, v3, m - 1);
		divide_triangle(v2, v3, c, m - 1);
	}
	else
		triangle(a, b, c);
}

void display()
{
	glClear(GL_COLOR_BUFFER_BIT);
	divide_triangle(v[0], v[1], v[2], n);
	glFlush();
}

void myinit()
{
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluOrtho2D(-2.0, 2.0, -2.0, 2.0);
	glMatrixMode(GL_MODELVIEW);
	glClearColor(1, 1, 1, 0);
	glColor3f(1, 0, 0);
}

int main()
{
	printf("Enter the number of sub-divisions?: ");
	scanf_s("%d", &n);
	glutInitWindowSize(500, 500);
	glutCreateWindow("2D Gasket");
	glutDisplayFunc(display);
	myinit();
	glutMainLoop();
	return 0;
}